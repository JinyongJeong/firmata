////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 Dimitry Ishenko
// Contact: dimitry (dot) ishenko (at) (gee) mail (dot) com
//
// Distributed under the GNU GPL license. See the LICENSE.md file for details.

////////////////////////////////////////////////////////////////////////////////
#ifndef FIRMATA_CALLBACK_HPP
#define FIRMATA_CALLBACK_HPP

////////////////////////////////////////////////////////////////////////////////
#include <functional>
#include <map>
#include <tuple>

////////////////////////////////////////////////////////////////////////////////
namespace firmata
{

////////////////////////////////////////////////////////////////////////////////
template<typename Fn>
using callback = std::function<Fn>;

using cbid = std::tuple<int, int>;

////////////////////////////////////////////////////////////////////////////////
template<typename Fn>
struct call_chain
{
    ////////////////////
    call_chain(int token = 0) noexcept : token_(token), id_(0) { }

    ////////////////////
    auto add(Fn fn)
    {
        cbid id(token_, id_++);
        chain_.emplace(id, std::move(fn));
        return id;
    }
    bool remove(cbid id) { return chain_.erase(id); }

    auto empty() const noexcept { return chain_.empty(); }

    template<typename... Args>
    void operator()(Args&&... args)
    {
        for(auto const& fn : chain_) fn.second(std::forward<Args>(args)...);
    }

private:
    ////////////////////
    int token_, id_;
    std::map<cbid, Fn> chain_;
};

////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////
#endif
